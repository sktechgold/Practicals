// =====================================================
// MongoDB Aggregation and Indexing Example
// =====================================================

// Step 1: Select or Create Database
use libraryDB

// Drop existing collection (optional, for clean run)
db.books.drop()

// Step 2: Insert Sample Documents
db.books.insertMany([
  { _id: 1, title: "DBMS", author: "Korth", price: 500, category: "Database", copies: 10 },
  { _id: 2, title: "Operating Systems", author: "Galvin", price: 400, category: "OS", copies: 5 },
  { _id: 3, title: "Computer Networks", author: "Tanenbaum", price: 450, category: "Networking", copies: 8 },
  { _id: 4, title: "SQL Guide", author: "Korth", price: 550, category: "Database", copies: 12 },
  { _id: 5, title: "Linux Internals", author: "Galvin", price: 420, category: "OS", copies: 7 }
])

print("\nâœ… Documents Inserted Successfully!\n")

// =====================================================
// Step 3: Aggregation Example
// Goal: Find total number of books and average price in each category
// =====================================================
print("ðŸ”¹ Aggregation: Total Books and Average Price by Category")
db.books.aggregate([
  { $group: { _id: "$category", totalBooks: { $sum: 1 }, avgPrice: { $avg: "$price" } } },
  { $sort: { avgPrice: -1 } }
]).pretty()

// =====================================================
// Step 4: Aggregation with Condition (Using $match)
// Goal: Get total copies for books priced above 450
// =====================================================
print("\nðŸ”¹ Aggregation with Condition (price > 450)")
db.books.aggregate([
  { $match: { price: { $gt: 450 } } },
  { $group: { _id: null, totalCopies: { $sum: "$copies" } } }
]).pretty()

// =====================================================
// Step 5: Create Index
// =====================================================
print("\nðŸ”¹ Creating Index on 'author' field...")
db.books.createIndex({ author: 1 })

// =====================================================
// Step 6: View Existing Indexes
// =====================================================
print("\nðŸ”¹ Current Indexes:")
printjson(db.books.getIndexes())

// =====================================================
// Step 7: Query Using Index
// =====================================================
print("\nðŸ”¹ Find all books by author 'Korth'")
db.books.find({ author: "Korth" }).pretty()

// =====================================================
// Step 8: Drop Index (Optional)
// =====================================================
print("\nðŸ”¹ Dropping Index on 'author'")
db.books.dropIndex({ author: 1 })

// =====================================================
// END OF PROGRAM
// =====================================================
print("\n=== âœ… MongoDB Aggregation & Indexing Example Executed Successfully ===\n")